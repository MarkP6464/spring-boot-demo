package com.example.demo.entities;
// Generated May 6, 2022, 8:01:05 PM by Hibernate Tools 4.3.6.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import lombok.Builder;

/**
 * Episodes generated by hbm2java
 */

@Entity
@Table(name = "episodes", schema = "dbo", catalog = "FirstProject")
public class Episodes implements java.io.Serializable {

	private Integer episodesId;
	private Set<Server> servers = new HashSet<Server>(0);
	private Set<Movie> movies = new HashSet<Movie>(0);

	public Episodes() {
	}

	public Episodes(Set<Server> servers, Set<Movie> movies) {
		this.servers = servers;
		this.movies = movies;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "episodes_id", unique = true, nullable = false)
	public Integer getEpisodesId() {
		return this.episodesId;
	}

	public void setEpisodesId(Integer episodesId) {
		this.episodesId = episodesId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "episodes",cascade = CascadeType.ALL)
	public Set<Server> getServers() {
		return this.servers;
	}

	public void setServers(Set<Server> servers) {
		this.servers = servers;
	}

	@ManyToMany(fetch = FetchType.LAZY ,cascade = CascadeType.ALL)
	@JoinTable(name = "connection", schema = "dbo", catalog = "FirstProject", 
		joinColumns ={@JoinColumn(name = "episodes_id", nullable = false, updatable = false) } ,
		inverseJoinColumns = {@JoinColumn(name = "movie_id", nullable = false, updatable = false) })
	public Set<Movie> getMovies() {
		return this.movies;
	}

	public void setMovies(Set<Movie> movies) {
		this.movies = movies;
	}

	@Override
	public String toString() {
		return "Episodes [episodesId=" + episodesId + ", servers=" + servers + ", movies=" + movies + "]";
	}

	
}
